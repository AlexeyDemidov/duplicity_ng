#!/bin/bash
#
# This file is maintained by Chef for <%= node['fqdn'] %>.
# Local changes will be overwritten.

# Exit on error
set -o nounset
set -o errexit

# Make sure only one backup is run at a time
lockfile -<%= @lockwait %> -r <%= @lockretries %>  "<%= @lockfile %>" || exit 1

# Cleanup lockfile on exit
cleanup() {
  rm -f "<%= @lockfile %>"
}
trap cleanup EXIT

umask 077

# Create archive/temp directories
mkdir -p <%= @temp_dir %> >> <%= @logfile %> 2>&1
mkdir -p <%= @archive_dir %> >> <%= @logfile %> 2>&1

LAST_RUN_FILE="<%= @archive_dir %>/lastrun"
MINAGE="<%= @minage %>"
if [ -e $LAST_RUN_FILE ]; then
  LAST_RUN=$(stat --format=%Y $LAST_RUN_FILE)
  if [ $LAST_RUN -gt $(( $(date +%s) - ${MINAGE} )) ]; then
    echo Last run finished $(( $(date +%s) - $LAST_RUN )) seconds ago, skipping
    exit 1
  fi
fi

<% Array(@exec_pre).each do |cmd| %>
<%= cmd %>
<% end -%>

# Source configuration
if [ -e "<%= @configfile %>" ]; then
  . <%= @configfile %>
fi

# Remove old backups
nice -n <%= @nice %> ionice -c <%= @ionice %> $DUPLICITY_PATH \
  remove-all-but-n-full <%= @keep_full %> --force \
  ${DUPLICITY_ARGUMENTS[@]} >> <%= @logfile %> 2>&1

# Clean up
nice -n <%= @nice %> ionice -c <%= @ionice %> $DUPLICITY_PATH cleanup --force \
  ${DUPLICITY_ARGUMENTS[@]} >> <%= @logfile %> 2>&1

<% Array(@exec_before).each do |cmd| %>
<%= cmd %>
<% end -%>

# Backup selected directories
time nice -n <%= @nice %> ionice -c <%= @ionice %> $DUPLICITY_PATH \
  --full-if-older-than <%= @full_backup_if_older_than %> \
  --exclude-device-files / \
<% Array(@exclude).each do |dir| %>
  --exclude <%= dir %> \
<% end -%>
<% Array(@include).each do |dir| %>
  --include <%= dir %> \
<% end -%>
  --exclude '**' \
  ${DUPLICITY_ARGUMENTS[@]} --gpg-options """$GPGOPT""" >> <%= @logfile %> 2>&1

# Collection status
nice -n <%= @nice %> ionice -c <%= @ionice %> $DUPLICITY_PATH collection-status \
  ${DUPLICITY_ARGUMENTS[@]} >> <%= @logfile %> 2>&1

# Unset all passphrases
unset PASSPHRASE
unset SWIFT_USERNAME
unset SWIFT_PASSWORD
unset SWIFT_AUTHURL
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset GS_ACCESS_KEY_ID
unset GS_SECRET_ACCESS_KEY
unset FTP_PASSWORD
unset AZURE_ACCOUNT_NAME
unset AZURE_ACCOUNT_KEY

<% Array(@exec_after).each do |cmd| %>
<%= cmd %>
<% end -%>

touch ${LAST_RUN_FILE} >> <%= @logfile %> 2>&1
